# inject a packet delay of 0-90ms while increasing the otel metric inverval to 1s
experiment:
  version: 0.0.1
  orchestrator: kubernetes
  pods:
    jaeger: 
      label_selector: app.kubernetes.io/name,
      label: jaeger,
      namespace: default,
    prometheus:
      label_selector: app.kubernetes.io/name,
      label: prometheus,
      namespace: default,
  responses:
    - recommendations_total:
        type: metric
        metric_name: increase(app_recommendations_counter_total[90s])
        left_window: 60s
        right_window: 60s
        step: 1
  treatments:
    - stop_loadgen_deployment:
        action: scale_deployment
        params: {
          namespace: default,
          label_selector:  app.kubernetes.io/component,
          label: loadgenerator,
          scale_to: 0,
        }
    - delay_treatment:
        action: delay
        params: {
          service_name: node-exporter,
          delay_time: 45ms,
          delay_jitter: 45ms,
          duration: 10s,
          interface: eth0,
        }
    - empty_k8s:
        action: empty_kubernetes
        params: {
          duration: 10s,
        }
    - interval:
        action: otel_metrics_interval
        params: {
          compose_file: opentelemetry-demo/docker-compose.yml,
          service_name: recommendationservice,
          interval: 1s
        }
  sue:
    compose: opentelemetry-demo/docker-compose.yml
    exclude: [loadgenerator]
    required: [{namespace: monitoring, name: grafana}, {namespace: monitoring, name: node-exporter}] # {namespace: monitoring, name: not-running-service}
    #required: [{namespace: monitoring, name: grafana}, {namespace: monitoring, name: node-exporter}]
  loadgen:
    run_time: 1m
    stages: 
    - {duration: 20, users: 50, spawn_rate: 25}
    tasks:
    - { endpoint: /, verb: get, weight: 1, params: { } }
    - { endpoint: /api/products/0PUK6V6EV0, verb: get, weight: 10, params: { } }
    - { endpoint: /api/recommendations, verb: get, weight: 3, params: { "productIds": ["1YMWWN1N4O"]}}
    - { endpoint: /api/cart, verb: get, weight: 3, params: { } }
    - { endpoint: /api/data, verb: get, weight: 3, params: { "contextKeys": [ "accessories" ] } }
    - { endpoint: /api/cart, verb: post, weight: 2, params: { "item": {"productId":"6E92ZMYYFZ", "quantity":2, }, "userId":'ab2d0fc0-7224-11ec-8ef2-b658b885fb3',} }